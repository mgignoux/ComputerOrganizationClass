// .global sha1_chunk

// sha1_chunk:
//     # h0 = edi 
//     # w = esi

//     pushq   %rbp
//     movq    %rsp, %rbp

//     # 
//     movq    %rsi, -8(%rbp)
//     movq    %rdi, -16(%rbp)

//     movq    %rbp, %rsp
//     popq    %rbp
//     ret

.global sha1_chunk

sha1_chunk:
    # h0 = edi 
    # w = esi

    pushq   %rbp
    movq    %rsp, %rbp

    movl   $16, %eax

    jmp    w_setup

    // call    createhashes

    movq    %rbp, %rsp
    popq    %rbp
    ret

w_setup:
    movl    %eax, %r8d
    movl    %eax, %r9d
    movl    %eax, %r10d
    movl    %eax, %r11d

    # p/x *($rdi + (4 * (16 - 3)))
    subl    $3, %r8d
    imul    $4, %r8d
    addq    %rsi, %r8
    movq    (%r8), %r12             # w[i-3]

    # p/x *($rdi + (4 * (16 - 8)))
    subl    $8, %r9d # 16 - 8
    imul    $4, %r9d # 8 * 4
    addq    %rsi, %r9 # &w[0] + 32 (8 elements)
    movq    (%r9), %r13             # w[i-8]

    subl    $14, %r10d
    imul    $4, %r10d
    addq    %rsi, %r10
    movq    (%r10), %r14             # w[i-14]

    subl    $16, %r11d
    imul    $4, %r11d
    addq    %rsi, %r11
    movq    (%r11), %r15             # w[i-16]
    
    xor     %r12d, %r13d    # w[i-3] xor w[i-8]
    xor     %r13d, %r14d    # w[i-3] xor w[i-8] xor w[i-14]
    xor     %r14d, %r15d    # w[i-3] xor w[i-8] xor w[i-14] xor w[i-16]

    roll    $1, %r15d       # (w[i-3] xor w[i-8] xor w[i-14] xor w[i-16]) leftrotate 1

    movl    %eax, %ebx    # ebx = i
    imul    $4, %ebx      # ebx * 4 (32-bit int element offsets)
    addq    %rsi, %rbx    # ebx = &w[0] + ebx (element offset) = &w[i]
    movq    %r15, (%rbx) # w[i] = r15d

    incl    %eax          # i++

    cmpl    $80, %eax     # if i < 80: jump to extend
    jl      w_setup

mainloopsetup:
    # p/x $r10d
    movq (%rdi), %r10          #     a(r10d) = h0   
    # p/x $r11d
    movq 4(%rdi), %r11         #     b(r11d) = h1 
    # p/x $r12d
    movq 8(%rdi), %r12         #     c(r12d) = h2    
    # p/x $r13d
    movq 12(%rdi), %r13        #     d(r13d) = h3    
    # p/x $r14d
    movq 16(%rdi), %r14        #     e(r14d) = h4 

    movl $0, %eax

mainloop:
    pushq   %rbp
    movq    %rsp, %rbp

    cmpl $20, %eax
    jl  loop1

    cmpl $40, %eax
    jl loop2

    cmpl $60, %eax
    jl loop3

    cmpl $80, %eax
    jl loop4

    movq    %rbp, %rsp
    popq    %rbp
 
loop1:
    pushq   %rbp                              
    movq    %rsp, %rbp

    subl    $24, %esp
    movq    %r11, -8(%rbp)  # b
    movq    %r12, -16(%rbp)  # c
    movq    %r13, -24(%rbp) # d

    and     %r11d, -16(%rbp)        # b and c
    notq    -8(%rbp)               # not b
    movq    -8(%rbp), %rbx         # store in ebx as to not overwrite b
    and     %ebx, -24(%rbp)        # ((not b) and d)
    movq    -24(%rbp), %rbx
    or      -16(%rbp), %rbx        # (b and c) or ((not b) and d) 0x40126c

    movl    %ebx, %r8d              # f(%r8d) = (b and c) or ((not b) and d)
    movl    $0x5A827999, %r9d       # k(%r9d) = 0x5A827999

    call shuffle
    call mainloop

    movq    %rbp, %rsp
    popq    %rbp

    ret

loop2:
    pushq   %rbp                               
    movq    %rsp, %rbp

    subl    $24, %esp
    movq    %r11, -8(%rbp) # b
    movq    %r12, -16(%rbp) # c
    movq    %r13, -24(%rbp) # d

    # FIXME: Does xor width matter with respect to upper bits?
    # not, just truncates

    xor     %r11, -16(%rbp)         # b xor c
    movq    -16(%rbp), %rbx         # store in ebx to avoid two memory calls
    xor     %rbx, -24(%rbp)         # (b xor c) xor d

    movq    -24(%rbp), %r8          # f(%r8d) = b xor c xor d
    movl    $0x6ED9EBA1, %r9d        # k(%r9d) = 0x6ED9EBA1
  
    call shuffle
    jmp mainloop

    movq    %rbp, %rsp                        
    popq    %rbp

    ret

loop3:
    pushq   %rbp                               
    movq    %rsp, %rbp

    subl    $24, %esp
    movq    %r11, -8(%rbp)     # b
    movq    %r12, -16(%rbp)    # c
    movq    %r13, -24(%rbp)    # d

    and     %r11, -16(%rbp)    # (b and c)
    and     %r13, -8(%rbp)     # (d and b)
    and     %r12, -24(%rbp)    # (c and d)
    movq    -8(%rbp), %rbx     # helper variable
    or      -16(%rbp), %rbx    # (b and c) or (d and b)
    or      %rbx, -24(%rbp)    # (b and c) or (d and b) or (c and d)

    movq    -24(%rbp), %r8          # f(%r8d) = (b and c) or (d and b) or (c and d)        
    movl    $0x8F1BBCDC, %r9d       # k(%r9d) = 0x8F1BBCDC
  
    call shuffle
    jmp mainloop
    
    movq    %rbp, %rsp                        
    popq    %rbp

    ret


loop4:
    pushq   %rbp                               
    movq    %rsp, %rbp

    subl    $24, %esp
    movq    %r11, -8(%rbp)    # b
    movq    %r12, -16(%rbp)   # c
    movq    %r13, -24(%rbp)   # d

    xor     %r11, -16(%rbp)    # b xor c
    movq    -16(%rbp), %rbx    # store in ebx to avoid two memory calls
    xor     %rbx, -24(%rbp)    # (b xor c) xor d

    movq    -24(%rbp), %r8          # f(%r8d) = b xor c xor d
    movl    $0xCA62C1D6, %r9d        # k(%r9d) = 0xCA62C1D6

    call shuffle
    jmp mainloop
    
    movq    %rbp, %rsp                        
    popq    %rbp

    ret

shuffle: 
    pushq   %rbp                               
    movq    %rsp, %rbp

    subl    $56, %esp
    movq    %r10, -8(%rbp)  # a
    movq    %r11, -16(%rbp) # b
    movq    %r12, -24(%rbp) # c
    movq    %r13, -32(%rbp) # d
    movq    %r14, -40(%rbp) # e
    movq    %r8, -48(%rbp)  # f
    movq    %r9, -56(%rbp)  # k
 
    movq    -8(%rbp), %rbx             # helper variable
    roll     $5, %ebx                  # (a leftrotate 5)
    addq    -48(%rbp), %rbx            # f + (a leftrotate 5)
    addq    -40(%rbp), %rbx            # e + ((a leftrotate 5) + f)
    addq    -56(%rbp), %rbx            # k + ((a leftrotate 5) + f + e)

    movl    %eax, %edx
    imul    $4, %edx
    addq    %rsi, %rdx

    addq    (%rdx), %rbx               # w[i] + ((a leftrotate 5) + f + e + k)  

    movl    %ebx, %r15d                # temp(r15d) = (a leftrotate 5) + f + e + k + w[i]          
    movl    %r13d, %r14d               # e = d
    movl    %r12d, %r13d               # d = c

    movq    -16(%rbp), %rbx             # helper variable
    roll    $30, %ebx             # b leftrotate 30
    movl    %ebx, %r12d             # c = b leftrotate 30

    movl    %r10d, %r11d                 #         b = a
    movl    %r15d, %r10d                 #         a = temp
   
    incl    %eax

    movq    %rbp, %rsp
    popq    %rbp

    ret

createhashes:
    # i think the upper bits need to all become zeros so that the add does not alter anything
    addq     %r10, (%rdi)          # h0 = h0 + a
    addq     %r11, 4(%rdi)         # h1 = h1 + b 
    addq     %r12, 8(%rdi)         # h2 = h2 + c
    addq     %r13, 12(%rdi)        # h3 = h3 + d
    addq     %r14, 16(%rdi)        # h4 = h4 + e
