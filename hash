.global sha1_chunk

mystring: .asciz "rdi: %x, rsi: %x \n" 
sha1_chunk:
    # h0 = rsi 
    # w = rdi

    # movq    %rsi, %rdx
    # movq    %rdi, %rsi
    # movq    $0, %rax            # first argument of printf, sets no vector registers for use in printf
    # movq    $mystring, %rdi     # second argument of printf, sets the adress of ths string in RDI
    
    # call    printf              # calls printf

    movq    $16, %rax
    call    extend

extend:
    pushq   %rbp                               
    movq    %rsp, %rbp

    cmpq    $79, %rax
    jg      mainloopsetup

    movq    %rax, %r8
    movq    %rax, %r9
    movq    %rax, %r10
    movq    %rax, %r11

    subq    $3, %r8      # i-3 
    subq    $8, %r9      # i-8
    subq    $14, %r10    # i-14
    subq    $16, %r11    # i-16

    movq    (%rdi, %r8, 1), %r12             # w[i-3]
    movq    (%rdi, %r9, 1), %r13             # w[i-8]
    movq    (%rdi, %r10, 1), %r14            # w[i-14]
    movq    (%rdi, %r11, 1), %r15            # w[i-16]
    
    xor     %r12, %r13    # w[i-3] xor w[i-8]
    xor     %r13, %r14    # w[i-3] xor w[i-8] xor w[i-14]
    xor     %r14, %r15    # w[i-3] xor w[i-8] xor w[i-14] xor w[i-16]
    rolq    $1, %r15      # (w[i-3] xor w[i-8] xor w[i-14] xor w[i-16]) leftrotate 1

    movq    %r15, (%rdi, %rax, 1)

    incq    %rax

    movq    %rbp, %rsp                        
    popq    %rbp

    jmp     extend


mainloopsetup:
    pushq   %rbp                               
    movq    %rsp, %rbp

    movq (%rsi), %r10          #     a(r10) = h0   
    movq -8(%rsi), %r11        #     b(r11) = h1 
    movq -16(%rsi), %r12       #     c(r12) = h2    
    movq -32(%rsi), %r13       #     d(r13) = h3    
    movq -48(%rsi), %r14       #     e(r14) = h4 

    movq $0, %rax
    call mainloop

    movq    %rbp, %rsp                        
    popq    %rbp

    call end

mainloop:
    pushq   %rbp                               
    movq    %rsp, %rbp

    cmpq $20, %rax
    jl  loop1

    cmpq $40, %rax
    jl loop2

    cmpq $60, %rax
    jl loop3

    cmpq $80, %rax
    jl loop4

    movq    %rbp, %rsp                        
    popq    %rbp

    call createhashes

loop1:
    pushq   %rbp                               
    movq    %rsp, %rbp  

    subq    $24, %rsp
    movq    %r11, -8(%rbp) # b
    movq    %r12, -16(%rbp) # c
    movq    %r13, -24(%rbp) # d

    and     %r11, -16(%rbp)        # b and c
    notq    -8(%rbp)               # not b
    movq    -8(%rbp), %rbx         # store in RBX as to not overwrite b
    and     %rbx, -24(%rbp)        # ((not b) and d)
    movq    -24(%rbp), %rbx
    or      -16(%rbp), %rbx        # (b and c) or ((not b) and d) 0x40126c

    movq    %rbx, %r8              # f(%r8) = (b and c) or ((not b) and d)
    movq    $0x5A827999, %r9       # k(%r9) = 0x5A827999

    movq    %rbp, %rsp                        
    popq    %rbp 

    call shuffle
    call mainloop
    ret

loop2:
    pushq   %rbp                               
    movq    %rsp, %rbp  

    subq    $24, %rsp
    movq    %r11, -8(%rbp) # b
    movq    %r12, -16(%rbp) # c
    movq    %r13, -24(%rbp) # d

    xor     %r11, -16(%rbp)         # b xor c
    movq    -16(%rbp), %rbx         # store in RBX to avoid two memory calls
    xor     %rbx, -24(%rbp)         # (b xor c) xor d

    movq    -24(%rbp), %r8          # f(%r8) = b xor c xor d
    movq    $0x6ED9EBA1, %r9        # k(%r9) = 0x6ED9EBA1

    movq    %rbp, %rsp                        
    popq    %rbp

    call shuffle
    call mainloop
    ret


loop3:
    pushq   %rbp                               
    movq    %rsp, %rbp  

    subq    $24, %rsp
    movq    %r11, -8(%rbp)     # b
    movq    %r12, -16(%rbp)    # c
    movq    %r13, -24(%rbp)    # d

    and     %r11, -16(%rbp)    # (b and c)
    and     %r13, -8(%rbp)     # (d and b)
    and     %r12, -24(%rbp)    # (c and d)
    movq    -8(%rbp), %rbx     # helper variable
    or      -16(%rbp), %rbx    # (b and c) or (d and b)
    or      %rbx, -24(%rbp)    # (b and c) or (d and b) or (c and d)
    
    movq    -24(%rbp), %r8          # f(%r8) = (b and c) or (d and b) or (c and d)        
    movq    $0x8F1BBCDC, %r9        # k(%r9) = 0x8F1BBCDC

    movq    %rbp, %rsp                        
    popq    %rbp

    call shuffle
    call mainloop
    ret


loop4:
    pushq   %rbp                               
    movq    %rsp, %rbp  

    subq    $24, %rsp
    movq    %r11, -8(%rbp)    # b
    movq    %r12, -16(%rbp)   # c
    movq    %r13, -24(%rbp)   # d

    xor     %r11, -16(%rbp)    # b xor c
    movq    -16(%rbp), %rbx    # store in RBX to avoid two memory calls
    xor     %rbx, -24(%rbp)    # (b xor c) xor d

    movq    -24(%rbp), %r8          # f(%r8) = b xor c xor d
    movq    $0xCA62C1D6, %r9        # k(%r9) = 0xCA62C1D6

    movq    %rbp, %rsp                        
    popq    %rbp

    call shuffle
    call mainloop
    ret

shuffle: 
    pushq   %rbp                               
    movq    %rsp, %rbp  

    subq    $224, %rsp
    movq    %r10, -8(%rbp)  # a
    movq    %r11, -16(%rbp) # b
    movq    %r12, -24(%rbp) # c
    movq    %r13, -32(%rbp) # d
    movq    %r14, -40(%rbp) # e
    movq    %r8, -48(%rbp)  # f
    movq    %r9, -56(%rbp)  # k
 
    rolq     $5, -8(%rbp)              # (a leftrotate 5)
    movq    -8(%rbp), %rbx             # helper variable
    addq    -48(%rbp), %rbx            # f + (a leftrotate 5)
    addq    -40(%rbp), %rbx            # e + ((a leftrotate 5) + f)
    addq    -56(%rbp), %rbx            # k + ((a leftrotate 5) + f + e)

    addq    (%rdi, %rax, 1), %rbx      # w[i] + ((a leftrotate 5) + f + e + k)  

    movq    %rbx, %r15                 # temp(r15) = (a leftrotate 5) + f + e + k + w[i]          

    movq    %r13, %r14                 #         e = d
    movq    %r12, %r13                 #         d = c

    rolq     $30, -16(%rbp)            # b leftrotate 30
    movq    -16(%rbp), %r12            # c = b leftrotate 30

    movq    %r10, %r11                 #         b = a
    movq    %r15, %r10                 #         a = temp

    movq    %rbp, %rsp                        
    popq    %rbp

    incq    %rax
    ret
 
createhashes: 
    pushq   %rbp                               
    movq    %rsp, %rbp  

    addq     %r10, (%rsi)          # h0 = h0 + a
    addq     %r11, -8(%rsi)        # h1 = h1 + b 
    addq     %r12, -16(%rsi)       # h2 = h2 + c
    addq     %r13, -24(%rsi)       # h3 = h3 + d
    addq     %r14, -32(%rsi)       # h4 = h4 + e

    movq    %rbp, %rsp                        
    popq    %rbp

    call end 

end:
    mov     $0,  %rdi          
    call    exit               
